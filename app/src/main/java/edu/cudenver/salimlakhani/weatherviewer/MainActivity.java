package edu.cudenver.salimlakhani.weatherviewer;

import androidx.appcompat.app.AppCompatActivity;

import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;


import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

public class MainActivity extends AppCompatActivity {
    private EditText editTextCity;
    private TextView textViewDescription;
    private TextView textViewTemp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        editTextCity = findViewById(R.id.editTextCity);
        textViewDescription = findViewById(R.id.textViewDEscription);
        textViewTemp = findViewById(R.id.textViewTemp);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String location = editTextCity.getText().toString();

                if (location.equals("")) {
                    location = "Denver";
                }

                try {
                    String url1 = "https://api.openweathermap.org/data/2.5/weather?q=";
                    String url2 = "&APPID=f74fb911c142570055fe3ffd72a514fe";   //Replace xxxx with your own key
                    String url = url1 + location + url2;

                    URL webUrl = new URL (url);

                    WeatherManager wm = new WeatherManager();
                    //The following statement will execute the doInBackground method in
                    //the WeatherManager class. Even though we are not calling doInBackground
                    //method directly but we are creating a thread and execute method will
                    //start the predefined method (doInBackground in this case)
                    wm.execute (webUrl);

                }
                catch (Exception e) {
                    Log.i ("info", e.getMessage());
                }


            }
        });
    }

    /*
    In case of ArrayList we use the <> to indicate the type of object that will be stored in the
    ArrayList. In the same way we need to provide three parameters to AsyncTask object. These
    parameters are as follows:

    First parameter is the type of parameter send to the task (doInBackground method) upon execution.
    In this case we are specifying that URL object is the parameter that will be sent to doInBackground
    method. URL is alo the parameter passed to doInBackground method.

    The second parameter is progress or type of progress our doInBackground method will publish. In our
    our we are specifying it to be void - no progress report is required

    Third parameter is type of result that will be generated by doInBackground method. We have
    specified it to be string and that is why the return type for our doInBackground method is String.
    It is also the data type that will be passed to onPostExecute
     */
    public class WeatherManager extends AsyncTask<URL, Void, String> {

        @Override
        protected String doInBackground(URL... urls) {

            //Create a connection object
            HttpURLConnection connection = null;

            try {
                //Open the connection to the server with given URL
                connection = (HttpURLConnection) urls[0].openConnection();

                //Get the response from the action of opening the connect.
                int response = connection.getResponseCode();

                if (response == HttpURLConnection.HTTP_OK) {
                    StringBuilder builder = new StringBuilder();
                    try {
                        //Using Scanner
                        Scanner scanner = new Scanner(new InputStreamReader(connection.getInputStream()));
                        String line;

                        //Iterate through this loop as long as there is a line to read
                        //in input buffer (or input stream)
                        while (scanner.hasNext()) {
                            line = scanner.nextLine();
                            builder.append(line);
                        }
                    }
                    catch (IOException e) {
                        Log.i ("ino", e.getMessage());
                    }
                    return builder.toString();
                }
                else {
                    //If respons code is not HTTP_OK the log the result
                    Log.i ("info", Integer.toString(response));
                }

            }
            catch (Exception e) {
                Log.i ("info", e.getMessage());
            }

            return null;
        }

        @Override
        protected void onPostExecute(String s) {

            if (s != null) {
                Weather weather = new Weather(s);
                displayResult(weather);
            }
            else
            {
                Log.i ("info", "Received Null String");
            }
        }
    }

    public void displayResult (Weather weather) {

        //Log.i ("info", "Date: " + weather.getDate());
        textViewDescription.setText(weather.getDescription());
        textViewTemp.setText(weather.getTemp());
    }
}